/*
Copyright 2022 SLATE project.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/slateci/nrp-clone/pkg/apis/nrpapi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterNamespaceLister helps list ClusterNamespaces.
// All objects returned here must be treated as read-only.
type ClusterNamespaceLister interface {
	// List lists all ClusterNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterNamespace, err error)
	// ClusterNamespaces returns an object that can list and get ClusterNamespaces.
	ClusterNamespaces(namespace string) ClusterNamespaceNamespaceLister
	ClusterNamespaceListerExpansion
}

// clusterNamespaceLister implements the ClusterNamespaceLister interface.
type clusterNamespaceLister struct {
	indexer cache.Indexer
}

// NewClusterNamespaceLister returns a new ClusterNamespaceLister.
func NewClusterNamespaceLister(indexer cache.Indexer) ClusterNamespaceLister {
	return &clusterNamespaceLister{indexer: indexer}
}

// List lists all ClusterNamespaces in the indexer.
func (s *clusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterNamespace))
	})
	return ret, err
}

// ClusterNamespaces returns an object that can list and get ClusterNamespaces.
func (s *clusterNamespaceLister) ClusterNamespaces(namespace string) ClusterNamespaceNamespaceLister {
	return clusterNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterNamespaceNamespaceLister helps list and get ClusterNamespaces.
// All objects returned here must be treated as read-only.
type ClusterNamespaceNamespaceLister interface {
	// List lists all ClusterNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterNamespace, err error)
	// Get retrieves the ClusterNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterNamespace, error)
	ClusterNamespaceNamespaceListerExpansion
}

// clusterNamespaceNamespaceLister implements the ClusterNamespaceNamespaceLister
// interface.
type clusterNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterNamespaces in the indexer for a given namespace.
func (s clusterNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterNamespace))
	})
	return ret, err
}

// Get retrieves the ClusterNamespace from the indexer for a given namespace and name.
func (s clusterNamespaceNamespaceLister) Get(name string) (*v1alpha1.ClusterNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusternamespace"), name)
	}
	return obj.(*v1alpha1.ClusterNamespace), nil
}
